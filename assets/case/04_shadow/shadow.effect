// Copyright (c) 2017-2020 Xiamen Yaji Software Co., Ltd.
CCEffect %{
  techniques:
  - passes:
    - vert: sprite-vs:vert
      frag: sprite-fs:frag
      depthStencilState:
        depthTest: false
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      rasterizerState:
        cullMode: none
      properties:
        alphaThreshold: { value: 0.5 }
        isWhite: { value: -1.0 }
}%

CCProgram sprite-vs %{
  precision highp float;
  #include <cc-global>
  #if USE_LOCAL
    #include <cc-local>
  #endif

  in vec3 a_position;
  in vec2 a_texCoord;
  in vec4 a_color;

  out vec4 color;
  out vec2 uv0;

  vec4 vert () {
    vec4 pos = vec4(a_position, 1);

    #if USE_LOCAL
      pos = cc_matWorld * pos;
    #endif

    #if USE_PIXEL_ALIGNMENT
      pos = cc_matView * pos;
      pos.xyz = floor(pos.xyz);
      pos = cc_matProj * pos;
    #else
      pos = cc_matViewProj * pos;
    #endif

    uv0 = a_texCoord;

    color = a_color;

    return pos;
  }
}%

CCProgram sprite-fs %{
  precision highp float;
  #include <embedded-alpha>
  #include <alpha-test>

  in vec4 color;

  #if USE_TEXTURE
    in vec2 uv0;
    #pragma builtin(local)
    layout(set = 2, binding = 10) uniform sampler2D cc_spriteTexture;
  #endif

  uniform FragConstants {
    float isWhite;
  };

  vec4 composite(vec4 over, vec4 under)
  {
    return over + (1.0 - over.a)*under;
  }
  vec4 getColor(vec4 color){
    if(isWhite > 0.0){
      if(color.a > 0.0){
        return vec4(1.0,1.0,1.0,1.0);
      }
      return color;
    }
    return color;
  }

  vec4 frag () {
    vec2 shadowOffset = vec2(-0.0, -0.2);
    vec4 textureColor = CCSampleWithAlphaSeparated(cc_spriteTexture,uv0 );
    float shadowMask = CCSampleWithAlphaSeparated(cc_spriteTexture,uv0 +shadowOffset ).a;
    const float shadowOpacity = 0.5;
    vec4 shadowColor = vec4(0.0,0.0,0.0,shadowMask*shadowOpacity);
    textureColor = getColor(textureColor);
    return composite(textureColor,shadowColor);
  }
}%
