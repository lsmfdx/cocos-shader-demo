// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: unlit-vs
      frag: unlit-fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        mainTexture: { value: white }
        alphaThreshold: { value: 0.5 }
}%


CCProgram unlit-vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram unlit-fs %{
  precision highp float;
  
  #include <alpha-test>
  #include <texture>

  in vec4 v_color;

  #if USE_TEXTURE
    in vec2 v_uv0;
    uniform sampler2D mainTexture;
  #endif

  uniform FragConstants {
    float isWhite;
  };
  
  vec4 composite(vec4 over, vec4 under)
  {
    return over + (1.0 - over.a)*under;
  }
  vec4 getColor(vec4 color){
    if(isWhite > 0.0){
      if(color.a > 0.0){
        return vec4(1.0,1.0,1.0,1.0);
      }
      return color;
    }
    return color;
  }

  void main(){
    vec2 shadowOfunlit-fset = vec2(-0.0, -0.08);
    vec4 textureColor = texture2D(mainTexture,v_uv0 );
    float shadowMask = texture2D(mainTexture,v_uv0 +shadowOfunlit-fset ).a;
    const float shadowOpacity = 0.5;
    vec4 shadowColor = vec4(0.0,0.0,0.0,shadowMask*shadowOpacity);
    textureColor = getColor(textureColor);
    gl_FragColor = composite(textureColor,shadowColor);
  }
}%
