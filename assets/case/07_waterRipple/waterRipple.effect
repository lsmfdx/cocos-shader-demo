// Copyright (c) 2017-2020 Xiamen Yaji Software Co., Ltd.
CCEffect %{
  techniques:
  - passes:
    - vert: sprite-vs:vert
      frag: sprite-fs:frag
      depthStencilState:
        depthTest: false
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      rasterizerState:
        cullMode: none
      properties:
        alphaThreshold: { value: 0.5 }
        center: { value: [0, 0] }
        u_time: {value: 0 }
        progress: { value: 0 }
        aspect: { value: 0 }
        radius: { value: 0 }
        life: { value: 0 }
        band: { value: 0 }
        amp: { value: 0 }
        waves: { value: 0 }
        speed: { value: 0 }
}%

CCProgram sprite-vs %{
  precision highp float;
  #include <builtin/uniforms/cc-global>
  #if USE_LOCAL
    #include <builtin/uniforms/cc-local>
  #endif

  in vec3 a_position;
  in vec2 a_texCoord;
  in vec4 a_color;

  out vec4 color;
  out vec2 uv0;

  vec4 vert () {
    vec4 pos = vec4(a_position, 1);

    #if USE_LOCAL
      pos = cc_matWorld * pos;
    #endif

    #if USE_PIXEL_ALIGNMENT
      pos = cc_matView * pos;
      pos.xyz = floor(pos.xyz);
      pos = cc_matProj * pos;
    #else
      pos = cc_matViewProj * pos;
    #endif

    uv0 = a_texCoord;

    color = a_color;

    return pos;
  }
}%

CCProgram sprite-fs %{
  precision highp float;
  #include <builtin/internal/embedded-alpha>
  #include <builtin/internal/alpha-test>

  #pragma define MAX_NUMBER 4

  in vec4 color;

  #if USE_TEXTURE
    in vec2 uv0;
    #pragma builtin(local)
    layout(set = 2, binding = 10) uniform sampler2D cc_spriteTexture;
  #endif

  uniform FragConstants {
    vec2 center;
    float u_time;
    float aspect;
    float life;
    float radius;
    float amp;
    float band;
    float waves;
    float speed;
    float progress;
  };

  vec4 frag () {
    vec2 tc = uv0;
    vec2 uv = vec2(0.0, 0.0);
    vec2 p;
    float len;
    vec2 uv_offset;
    float wave_width = band * radius;

    p = (tc - center);
    p.x = p.x * aspect;
    len = length(p);

    float current_progress = progress / life;
    if (current_progress > 1.0) {
        vec4 t_image = CCSampleWithAlphaSeparated(cc_spriteTexture,uv0);
        return t_image;
    }

    float current_radius = radius * current_progress;
    float damp_factor = 1.0;
    if (current_progress > .5) {
        damp_factor = (1.0 - current_progress) * 2.0;
    }

    float cut_factor = clamp(wave_width * damp_factor - abs(current_radius - len), 0.0, 1.0);
    float waves_factor = waves * len / radius;
    uv_offset = (p / len) * cos((waves_factor - current_progress * speed) * 3.14) * amp * cut_factor;

    uv += uv_offset;
    
    vec4 t_image = CCSampleWithAlphaSeparated(cc_spriteTexture, fract(tc + uv));

    return t_image;
  }
}%
