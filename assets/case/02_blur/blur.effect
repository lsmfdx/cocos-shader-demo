// Copyright (c) 2017-2020 Xiamen Yaji Software Co., Ltd.
CCEffect %{
  techniques:
  - passes:
    - vert: sprite-vs:vert
      frag: sprite-fs:frag
      depthStencilState:
        depthTest: false
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      rasterizerState:
        cullMode: none
      properties:
        alphaThreshold: { value: 0.5 }
        resolution:    { value: [384.0, 216.0] }
}%

CCProgram sprite-vs %{
  precision highp float;
  #include <builtin/uniforms/cc-global>
  #if USE_LOCAL
    #include <builtin/uniforms/cc-local>
  #endif

  in vec3 a_position;
  in vec2 a_texCoord;
  in vec4 a_color;

  out vec4 color;
  out vec2 uv0;

  vec4 vert () {
    vec4 pos = vec4(a_position, 1);

    #if USE_LOCAL
      pos = cc_matWorld * pos;
    #endif

    #if USE_PIXEL_ALIGNMENT
      pos = cc_matView * pos;
      pos.xyz = floor(pos.xyz);
      pos = cc_matProj * pos;
    #else
      pos = cc_matViewProj * pos;
    #endif

    uv0 = a_texCoord;

    color = a_color;

    return pos;
  }
}%

CCProgram sprite-fs %{
  precision highp float;
  #include <builtin/internal/embedded-alpha>
  #include <builtin/internal/alpha-test>

  in vec4 color;

  #if USE_TEXTURE
    in vec2 uv0;
    #pragma builtin(local)
    layout(set = 2, binding = 10) uniform sampler2D cc_spriteTexture;
  #endif

  uniform FragConstants {
    vec2 resolution;
  };

  const float blurRadius = 5.0;//半径
  const float sampleNum = 4.0;//间隔的段数
  vec4 blur(vec2);

  vec4 frag () {
    vec4 o = vec4(1, 1, 1, 1);

    #if USE_TEXTURE
      o *= CCSampleWithAlphaSeparated(cc_spriteTexture, uv0);
    #endif

    ALPHA_TEST(o);
    o = blur(uv0);
    o *= color;
    return o;
  }

    vec4 blur(vec2 p) {
    if (blurRadius > 0.0 && sampleNum > 1.0) {
      vec4 col = vec4(0.0); 
      vec2 unit = 1.0 / resolution.xy;//单位坐标             
      float count = 0.0;
      // 遍历一个矩形，当前的坐标为中心点，遍历矩形中每个像素点的颜色   
      for (float x = -blurRadius; x < blurRadius; x += blurRadius / sampleNum) {
        for (float y = -blurRadius; y < blurRadius; y += blurRadius / sampleNum) {
          float weight = (blurRadius - abs(x)) * (blurRadius - abs(y));//权重，p点的权重最高，向四周依次减少
          col += CCSampleWithAlphaSeparated(cc_spriteTexture, p + vec2(x * unit.x, y * unit.y)) * weight; 
          count += weight;
        }
      }
      //得到实际模糊颜色的值
      return col / count;
    }
    return CCSampleWithAlphaSeparated(cc_spriteTexture, p);
  }
}%
