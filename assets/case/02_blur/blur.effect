// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: unlit-vs
      frag: unlit-fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        mainTexture: { value: white }
        alphaThreshold: { value: 0.5 }
}%


CCProgram unlit-vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram unlit-fs %{
  precision highp float;
  
  #include <alpha-test>
  #include <texture>

  #if USE_TEXTURE
    in vec2 v_uv0;
    uniform sampler2D mainTexture;
  #endif

  in vec4 v_color;

  uniform FragConstants {
    vec4 resolution;
  };
  
  const float blurRadius = 5.0;//半径
  const float sampleNum = 2.0;//间隔的段数
  vec4 blur(vec2);

  void main () {
    vec4 color = v_color;
        
    #if USE_TEXTURE
        color *= texture2D(mainTexture, v_uv0);
        #if _USE_ETC1_TEXTURE
            color.a *= texture2D(mainTexture, v_uv0 + vec2(0, 0.5)).r;
        #endif
    #endif
    
    ALPHA_TEST(v_color);

    vec4 col = blur(v_uv0);

    gl_FragColor = vec4(col) * color;
  }

  vec4 blur(vec2 p) {
    if (blurRadius > 0.0 && sampleNum > 1.0) {
      vec4 col = vec4(0.0); 
      vec2 unit = 1.0 / resolution.xy;//单位坐标             
      float count = 0.0;
      // 遍历一个矩形，当前的坐标为中心点，遍历矩形中每个像素点的颜色   
      for (float x = -blurRadius; x < blurRadius; x += blurRadius / sampleNum) {
        for (float y = -blurRadius; y < blurRadius; y += blurRadius / sampleNum) {
          float weight = (blurRadius - abs(x)) * (blurRadius - abs(y));//权重，p点的权重最高，向四周依次减少
          col += texture2D(mainTexture, p + vec2(x * unit.x, y * unit.y)) * weight; 
          count += weight;
        }
      }
      //得到实际模糊颜色的值
      return col / count;
    }
    return texture2D(mainTexture, p);
  }
}%