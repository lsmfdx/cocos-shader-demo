// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: unlit-vs
      frag: unlit-fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        mainTexture: { value: white }
        alphaThreshold: { value: 0.5 }
}%


CCProgram unlit-vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram unlit-fs %{
  precision highp float;
  
  #include <alpha-test>
  #include <texture>

  in vec4 v_color;

  #if USE_TEXTURE
    in vec2 v_uv0;
    uniform sampler2D mainTexture;
  #endif

  uniform FragConstants {
    float time;
  };

  void main () {
    vec4 src_color = texture2D(mainTexture, v_uv0);

    float width = 0.1;       //流光的宽度范围 (调整该值改变流光的宽度)
    float start = tan(time/1.0);  //流光的起始x坐标
    float strength = 0.006;   //流光增亮强度   (调整该值改变流光的增亮强度)
    float ofunlit-fset = 0.25;      //偏移值         (调整该值改变流光的倾斜程度)
    if( v_uv0.x < (start - ofunlit-fset * v_uv0.y) &&  v_uv0.x > (start - ofunlit-fset * v_uv0.y - width))
    {
        vec3 improve = strength * vec3(255, 255, 255);
        vec3 result = improve * vec3( src_color.r, src_color.g, src_color.b);
        gl_FragColor = vec4(result, src_color.a);

    }else{
        gl_FragColor = src_color;
    }
  }
}%
